'use strict';

const gulp = require('gulp'),
    imagemin = require('gulp-imagemin'),
    autoprefixer = require('gulp-autoprefixer'),
    rename = require("gulp-rename"),
    sass = require("gulp-sass"),
    csslint = require('gulp-csslint'),
    headerfooter = require('gulp-headerfooter'),
    csscomb = require('gulp-csscomb'),
    cleanCSS = require('gulp-clean-css'),
    concat = require('gulp-concat'),
    gulpMerge = require('gulp-merge'),
    strip = require('gulp-strip-comments'),
    sourcemaps = require('gulp-sourcemaps'),
    jshint = require('gulp-jshint'),
    uglify = require('gulp-uglify'),
    htmlhint = require("gulp-htmlhint");

gulp.task('imgs:build', function () {
    gulp.src('app/imgs/*')
        .pipe(imagemin())
        .pipe(gulp.dest('dist/imgs'))
});

gulp.task('css:build', function (cb) {
    var fs = require('fs');
    var output = '';

    var customCss = gulp.src(['app/sass/style.scss', 'app/sass/media.scss'])
        .pipe(sourcemaps.init())
        .pipe(sass().on('error', sass.logError))
        .pipe(autoprefixer({
            cascade: false
        }))
        .pipe(csscomb({"sort-order-fallback": "abc"}))
        .pipe(csslint({"order-alphabetical": false}))
        .pipe(csslint.formatter('text', {
            'logger': function (str) {
                output += str;
            }
        }))
        .pipe(cleanCSS())
        .pipe(strip.text())
        .pipe(concat('style.css'))

    var libCss = gulp.src(['app/css/bootstrap.min.css', 'app/css/font-awesome.min.css', 'app/css/owl.carousel.css', 'app/css/owl.theme.css'])
        .pipe(sourcemaps.init())
        .pipe(cleanCSS())
        .pipe(strip.text())
        .pipe(concat('libraries.css'))

    gulpMerge(libCss, customCss)
        .pipe(concat('style.css'))
        .pipe(headerfooter.header('/* !!! Do not edit this file. Use Gulp and Sass. !!! */\n\n'))
        .pipe(headerfooter.footer('\n\n/* !!! Do not edit this file. Use Gulp and Sass. !!! */'))
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('dist/css'))
        .on('end', function () {
            fs.writeFile('csslinter-log.txt', output, cb);
        });
});

gulp.task('html:build', function () {
    gulp.src(['app/html/content/*'])
        .pipe(headerfooter.header('app/html/template/header.html'))
        .pipe(headerfooter.footer('app/html/template/footer.html'))
        .pipe(htmlhint('.htmlhintrc'))
        .pipe(htmlhint.reporter('htmlhint-stylish'))
        .pipe(gulp.dest('dist/html'));
});

gulp.task('jshint:build', function () {
    gulp.src('app/js/script.js')
        .pipe(jshint())
        .pipe(jshint.reporter('jshint-stylish'));
});

gulp.task('js:build', function () {
    gulp.src('app/js/*.js')
        .pipe(sourcemaps.init())
        .pipe(uglify())
        .pipe(concat('script.min.js'))
        .pipe(sourcemaps.write())
        .pipe(gulp.dest('dist/js'))
});

gulp.task('fonts:build', function () {
    gulp.src('app/fonts/**/*.*')
        .pipe(gulp.dest('dist/fonts/'))
});

gulp.task('default', ['html:build', 'css:build', 'imgs:build', 'jshint:build', 'js:build', 'fonts:build']);